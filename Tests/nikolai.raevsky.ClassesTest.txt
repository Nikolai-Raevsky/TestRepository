1.
 
___T____ A struct in C++ can contain methods. 
____F___ A struct can only have public members. 
_____T__ A default constructor can be defined either with default arguments for all arguments or 
with no arguments at all (i.e. void). 
____T___ Conversion constructors can be used only to convert to the class' type, not to another 
type.   
___F____ A copy constructor must have two explicit parameters: a reference to the class that is 
being copied from and a reference to the class that is being copied to. 
___T____ An initialization list may only be used with constructors. 

2.

a) __Copy___ Bar(const Bar& b); 
b) __Conversion___ Bar(int a); 
c) _____ Bar(void); 
d) Non-default_____ Bar(double a, int b, int c = 0); 
e) __Conversion___ Bar(const Foo& f); 
f) __Default___ Bar(int a = 5, int b = 10); 

3.
Foo(const Foo& fooObj);
4.
__NC (Jeremy checked)______ StopWatch sw1;   
____C____ StopWatch *sw2; 
__NC______ StopWatch sw3[5];  
___C_____ StopWatch *sw4[5]; 
_____C___ StopWatch sw5 = 1;  
____C____ StopWatch sw6[] = {1, 2, 3}; 
___NC_____ StopWatch *sw7[] = {1, 2, 3}; 

This one doesn't have a default constructor that pre-initializes the Stopwatch's seconds variable, so you can't declare a Stopwatch object without assigning a value to it. You can initialize Stopwatches and arrays of Stopwatches because that gives the variable a value
5.
___C_____ StopWatch1 sw1 = 1;  
____NC____ StopWatch2 sw2 = 1;  
StopWatch2 doesn't compile because it's conversion constructor is explicit.
6.
b. because the destructor would have a higher chance of breaking the program if it deleted the objects in the order of their creation. We don't even know if this program is going to use a destructor to delete objects, but it would be really bizarre if C++ destroyed objects in object of creation if the other objects need to be defined in relation to the first one as a general rule of thumb. Destructors get called no matter what because each class in C++ generates a default destructor (even though it doesn't do anything by default).
7.
void Student(const Student& _student)
{
	age = _student.age;
	GPA = _student.GPA;
	name = new char[strlen(_student.name)];
	strcpy(name, _student.name); 
} 


